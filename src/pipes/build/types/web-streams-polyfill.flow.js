"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransformStreamDefaultController = exports.TransformStreamDefaultControllerType = exports.TransformStream = exports.Transformer = exports.TransformStreamDefaultControllerTransformCallback = exports.TransformStreamDefaultControllerCallback = exports.ReadableByteStreamController = exports.ReadableByteStreamControllerType = exports.ReadableStreamBYOBRequest = exports.ReadableStreamBYOBRequestType = exports.ReadableStreamDefaultController = exports.ReadableStreamDefaultControllerType = exports.ReadableStreamBYOBReader = exports.ReadableStreamBYOBReaderType = exports.ReadableStreamDefaultReader = exports.ReadableStreamDefaultReaderType = exports.ReadableStreamAsyncIterator = exports.ReadableByteStream = exports.ReadableStream = exports.ReadResult = exports.PipeOptions = exports.UnderlyingByteSource = exports.UnderlyingSource = exports.ReadableStreamErrorCallback = exports.ReadableByteStreamControllerCallback = exports.ReadableStreamDefaultControllerCallback = exports.WritableStreamDefaultControllerType = exports.WritableStreamDefaultWriter = exports.WritableStreamDefaultWriterType = exports.WritableStream = exports.UnderlyingSink = exports.WritableStreamErrorCallback = exports.WritableStreamDefaultControllerCloseCallback = exports.WritableStreamDefaultControllerWriteCallback = exports.WritableStreamDefaultControllerStartCallback = exports.WritableStreamDefaultController = exports.QueuingStrategy = exports.QueuingStrategySizeCallback = void 0;

var _flowRuntime = _interopRequireDefault(require("flow-runtime"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable */

/**
 * Flowtype definitions for polyfill
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.3
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

/**
 * Type definitions for web-streams-polyfill v2.0.3
 */
const QueuingStrategySizeCallback = _flowRuntime.default.type("QueuingStrategySizeCallback", QueuingStrategySizeCallback => {
  const T = QueuingStrategySizeCallback.typeParameter("T", undefined, _flowRuntime.default.any());
  return _flowRuntime.default.function(_flowRuntime.default.param("chunk", T), _flowRuntime.default.return(_flowRuntime.default.number()));
});

exports.QueuingStrategySizeCallback = QueuingStrategySizeCallback;

const QueuingStrategy = _flowRuntime.default.type("QueuingStrategy", QueuingStrategy => {
  const T = QueuingStrategy.typeParameter("T", undefined, _flowRuntime.default.any());
  return _flowRuntime.default.object(_flowRuntime.default.property("highWaterMark", _flowRuntime.default.number(), true), _flowRuntime.default.property("size", _flowRuntime.default.ref(QueuingStrategySizeCallback, T), true));
});

exports.QueuingStrategy = QueuingStrategy;

const WritableStreamDefaultController = _flowRuntime.default.type("WritableStreamDefaultController", WritableStreamDefaultController => {
  const W = WritableStreamDefaultController.typeParameter("W", undefined, _flowRuntime.default.any());
  return _flowRuntime.default.object(_flowRuntime.default.property("error", _flowRuntime.default.function(_flowRuntime.default.param("e", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.void()))));
});

exports.WritableStreamDefaultController = WritableStreamDefaultController;

const WritableStreamDefaultControllerStartCallback = _flowRuntime.default.type("WritableStreamDefaultControllerStartCallback", _flowRuntime.default.function(_flowRuntime.default.param("controller", WritableStreamDefaultController), _flowRuntime.default.return(_flowRuntime.default.union(_flowRuntime.default.void(), _flowRuntime.default.ref("Promise", _flowRuntime.default.void())))));

exports.WritableStreamDefaultControllerStartCallback = WritableStreamDefaultControllerStartCallback;

const WritableStreamDefaultControllerWriteCallback = _flowRuntime.default.type("WritableStreamDefaultControllerWriteCallback", WritableStreamDefaultControllerWriteCallback => {
  const W = WritableStreamDefaultControllerWriteCallback.typeParameter("W");
  return _flowRuntime.default.function(_flowRuntime.default.param("chunk", W), _flowRuntime.default.param("controller", WritableStreamDefaultController), _flowRuntime.default.return(_flowRuntime.default.union(_flowRuntime.default.void(), _flowRuntime.default.ref("Promise", _flowRuntime.default.void()))));
});

exports.WritableStreamDefaultControllerWriteCallback = WritableStreamDefaultControllerWriteCallback;

const WritableStreamDefaultControllerCloseCallback = _flowRuntime.default.type("WritableStreamDefaultControllerCloseCallback", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.union(_flowRuntime.default.void(), _flowRuntime.default.ref("Promise", _flowRuntime.default.void())))));

exports.WritableStreamDefaultControllerCloseCallback = WritableStreamDefaultControllerCloseCallback;

const WritableStreamErrorCallback = _flowRuntime.default.type("WritableStreamErrorCallback", _flowRuntime.default.function(_flowRuntime.default.param("reason", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.union(_flowRuntime.default.void(), _flowRuntime.default.ref("Promise", _flowRuntime.default.void())))));

exports.WritableStreamErrorCallback = WritableStreamErrorCallback;

const UnderlyingSink = _flowRuntime.default.type("UnderlyingSink", UnderlyingSink => {
  const W = UnderlyingSink.typeParameter("W", undefined, _flowRuntime.default.any());
  return _flowRuntime.default.object(_flowRuntime.default.property("start", WritableStreamDefaultControllerStartCallback, true), _flowRuntime.default.property("write", _flowRuntime.default.ref(WritableStreamDefaultControllerWriteCallback, W), true), _flowRuntime.default.property("close", WritableStreamDefaultControllerCloseCallback, true), _flowRuntime.default.property("abort", WritableStreamErrorCallback, true), _flowRuntime.default.property("type", _flowRuntime.default.void(), true));
});

exports.UnderlyingSink = UnderlyingSink;

const WritableStream = _flowRuntime.default.type("WritableStream", WritableStream => {
  const W = WritableStream.typeParameter("W", undefined, _flowRuntime.default.any());
  return _flowRuntime.default.object(_flowRuntime.default.property("constructor", _flowRuntime.default.function(_flowRuntime.default.param("underlyingSink", _flowRuntime.default.ref(UnderlyingSink, W), true), _flowRuntime.default.param("strategy", _flowRuntime.default.ref(QueuingStrategy, W), true), _flowRuntime.default.return(_flowRuntime.default.any()))), _flowRuntime.default.property("locked", _flowRuntime.default.boolean()), _flowRuntime.default.property("abort", _flowRuntime.default.function(_flowRuntime.default.param("reason", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.void())))), _flowRuntime.default.property("getWriter", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.ref(_flowRuntime.default.tdz(() => WritableStreamDefaultWriter, "WritableStreamDefaultWriter"), W)))));
});

exports.WritableStream = WritableStream;

const WritableStreamDefaultWriterType = _flowRuntime.default.type("WritableStreamDefaultWriterType", WritableStreamDefaultWriterType => {
  const W = WritableStreamDefaultWriterType.typeParameter("W");
  return _flowRuntime.default.ref(_flowRuntime.default.tdz(() => WritableStreamDefaultWriter, "WritableStreamDefaultWriter"), W);
});

exports.WritableStreamDefaultWriterType = WritableStreamDefaultWriterType;

const WritableStreamDefaultWriter = _flowRuntime.default.type("WritableStreamDefaultWriter", WritableStreamDefaultWriter => {
  const W = WritableStreamDefaultWriter.typeParameter("W");
  return _flowRuntime.default.object(_flowRuntime.default.property("constructor", _flowRuntime.default.function(_flowRuntime.default.param("stream", _flowRuntime.default.ref(WritableStream, W)), _flowRuntime.default.return(_flowRuntime.default.any()))), _flowRuntime.default.property("closed", _flowRuntime.default.ref("Promise", _flowRuntime.default.void())), _flowRuntime.default.property("desiredSize", _flowRuntime.default.union(_flowRuntime.default.number(), _flowRuntime.default.null())), _flowRuntime.default.property("ready", _flowRuntime.default.ref("Promise", _flowRuntime.default.void())), _flowRuntime.default.property("abort", _flowRuntime.default.function(_flowRuntime.default.param("reason", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.void())))), _flowRuntime.default.property("close", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.void())))), _flowRuntime.default.property("releaseLock", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.void()))), _flowRuntime.default.property("write", _flowRuntime.default.function(_flowRuntime.default.param("chunk", W), _flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.void())))));
});

exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;

const WritableStreamDefaultControllerType = _flowRuntime.default.type("WritableStreamDefaultControllerType", _flowRuntime.default.ref(WritableStreamDefaultController, _flowRuntime.default.any()));

exports.WritableStreamDefaultControllerType = WritableStreamDefaultControllerType;

const ReadableStreamDefaultControllerCallback = _flowRuntime.default.type("ReadableStreamDefaultControllerCallback", ReadableStreamDefaultControllerCallback => {
  const R = ReadableStreamDefaultControllerCallback.typeParameter("R");
  return _flowRuntime.default.function(_flowRuntime.default.param("controller", _flowRuntime.default.ref(_flowRuntime.default.tdz(() => ReadableStreamDefaultController, "ReadableStreamDefaultController"), R)), _flowRuntime.default.return(_flowRuntime.default.union(_flowRuntime.default.void(), _flowRuntime.default.ref("Promise", _flowRuntime.default.void()))));
});

exports.ReadableStreamDefaultControllerCallback = ReadableStreamDefaultControllerCallback;

const ReadableByteStreamControllerCallback = _flowRuntime.default.type("ReadableByteStreamControllerCallback", _flowRuntime.default.function(_flowRuntime.default.param("controller", _flowRuntime.default.tdz(() => ReadableByteStreamController, "ReadableByteStreamController")), _flowRuntime.default.return(_flowRuntime.default.union(_flowRuntime.default.void(), _flowRuntime.default.ref("Promise", _flowRuntime.default.void())))));

exports.ReadableByteStreamControllerCallback = ReadableByteStreamControllerCallback;

const ReadableStreamErrorCallback = _flowRuntime.default.type("ReadableStreamErrorCallback", _flowRuntime.default.function(_flowRuntime.default.param("reason", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.union(_flowRuntime.default.void(), _flowRuntime.default.ref("Promise", _flowRuntime.default.void())))));

exports.ReadableStreamErrorCallback = ReadableStreamErrorCallback;

const UnderlyingSource = _flowRuntime.default.type("UnderlyingSource", UnderlyingSource => {
  const R = UnderlyingSource.typeParameter("R", undefined, _flowRuntime.default.any());
  return _flowRuntime.default.object(_flowRuntime.default.property("start", _flowRuntime.default.ref(ReadableStreamDefaultControllerCallback, R), true), _flowRuntime.default.property("pull", _flowRuntime.default.ref(ReadableStreamDefaultControllerCallback, R), true), _flowRuntime.default.property("cancel", ReadableStreamErrorCallback, true), _flowRuntime.default.property("type", _flowRuntime.default.void(), true));
});

exports.UnderlyingSource = UnderlyingSource;

const UnderlyingByteSource = _flowRuntime.default.type("UnderlyingByteSource", _flowRuntime.default.object(_flowRuntime.default.property("start", ReadableByteStreamControllerCallback, true), _flowRuntime.default.property("pull", ReadableByteStreamControllerCallback, true), _flowRuntime.default.property("cancel", ReadableStreamErrorCallback, true), _flowRuntime.default.property("type", _flowRuntime.default.string("bytes")), _flowRuntime.default.property("autoAllocateChunkSize", _flowRuntime.default.number(), true)));

exports.UnderlyingByteSource = UnderlyingByteSource;

const PipeOptions = _flowRuntime.default.type("PipeOptions", _flowRuntime.default.object(_flowRuntime.default.property("preventAbort", _flowRuntime.default.boolean(), true), _flowRuntime.default.property("preventCancel", _flowRuntime.default.boolean(), true), _flowRuntime.default.property("preventClose", _flowRuntime.default.boolean(), true), _flowRuntime.default.property("signal", _flowRuntime.default.ref("AbortSignal"), true)));

exports.PipeOptions = PipeOptions;

const ReadResult = _flowRuntime.default.type("ReadResult", ReadResult => {
  const T = ReadResult.typeParameter("T", undefined, _flowRuntime.default.any());
  return _flowRuntime.default.object(_flowRuntime.default.property("done", _flowRuntime.default.boolean()), _flowRuntime.default.property("value", T));
});

exports.ReadResult = ReadResult;

const ReadableStream = _flowRuntime.default.type("ReadableStream", ReadableStream => {
  const R = ReadableStream.typeParameter("R", undefined, _flowRuntime.default.any());
  return _flowRuntime.default.object(_flowRuntime.default.property("constructor", _flowRuntime.default.union(_flowRuntime.default.function(_flowRuntime.default.param("underlyingSource", UnderlyingByteSource), _flowRuntime.default.param("strategy", _flowRuntime.default.object(_flowRuntime.default.property("highWaterMark", _flowRuntime.default.number(), true), _flowRuntime.default.property("size", _flowRuntime.default.void(), true)), true), _flowRuntime.default.return(_flowRuntime.default.any())), _flowRuntime.default.function(_flowRuntime.default.param("underlyingSource", _flowRuntime.default.ref(UnderlyingSource, R), true), _flowRuntime.default.param("strategy", _flowRuntime.default.ref(QueuingStrategy, R), true), _flowRuntime.default.return(_flowRuntime.default.any())))), _flowRuntime.default.property("locked", _flowRuntime.default.boolean()), _flowRuntime.default.property("cancel", _flowRuntime.default.function(_flowRuntime.default.param("reason", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.void())))), _flowRuntime.default.property("getReader", _flowRuntime.default.union(_flowRuntime.default.function(_flowRuntime.default.param("x", _flowRuntime.default.object(_flowRuntime.default.property("mode", _flowRuntime.default.string("byob")))), _flowRuntime.default.return(_flowRuntime.default.tdz(() => ReadableStreamBYOBReader, "ReadableStreamBYOBReader"))), _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.ref(_flowRuntime.default.tdz(() => ReadableStreamDefaultReader, "ReadableStreamDefaultReader"), R))))), _flowRuntime.default.property("pipeThrough", _flowRuntime.default.function(_fn => {
    const T = _fn.typeParameter("T");

    return [_flowRuntime.default.param("x", _flowRuntime.default.object(_flowRuntime.default.property("writable", _flowRuntime.default.ref(WritableStream, R)), _flowRuntime.default.property("readable", _flowRuntime.default.ref(ReadableStream, T)))), _flowRuntime.default.param("x", PipeOptions, true), _flowRuntime.default.return(_flowRuntime.default.ref(ReadableStream, T))];
  })), _flowRuntime.default.property("pipeTo", _flowRuntime.default.function(_flowRuntime.default.param("dest", _flowRuntime.default.ref(WritableStream, R)), _flowRuntime.default.param("x", PipeOptions, true), _flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.void())))), _flowRuntime.default.property("tee", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.tuple(_flowRuntime.default.ref(ReadableStream, R), _flowRuntime.default.ref(ReadableStream, R))))), _flowRuntime.default.property("getIterator", _flowRuntime.default.function(_flowRuntime.default.param("x", _flowRuntime.default.object(_flowRuntime.default.property("preventCancel", _flowRuntime.default.boolean(), true)), true), _flowRuntime.default.return(_flowRuntime.default.ref(_flowRuntime.default.tdz(() => ReadableStreamAsyncIterator, "ReadableStreamAsyncIterator"), R)))), _flowRuntime.default.property("any", _flowRuntime.default.function(_flowRuntime.default.param("options", _flowRuntime.default.object(_flowRuntime.default.property("preventCancel", _flowRuntime.default.boolean(), true)), true), _flowRuntime.default.return(_flowRuntime.default.ref(_flowRuntime.default.tdz(() => ReadableStreamAsyncIterator, "ReadableStreamAsyncIterator"), R)))));
});

exports.ReadableStream = ReadableStream;

const ReadableByteStream = _flowRuntime.default.type("ReadableByteStream", _flowRuntime.default.ref(ReadableStream, _flowRuntime.default.ref("Uint8Array")));

exports.ReadableByteStream = ReadableByteStream;

const ReadableStreamAsyncIterator = _flowRuntime.default.type("ReadableStreamAsyncIterator", ReadableStreamAsyncIterator => {
  const R = ReadableStreamAsyncIterator.typeParameter("R");
  return _flowRuntime.default.intersection(_flowRuntime.default.object(_flowRuntime.default.property("next", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.ref("IteratorResult", R))))), _flowRuntime.default.property("return", _flowRuntime.default.function(_flowRuntime.default.param("value", _flowRuntime.default.any(), true), _flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.ref("IteratorResult", _flowRuntime.default.any())))))), _flowRuntime.default.ref("AsyncIterator", R));
});

exports.ReadableStreamAsyncIterator = ReadableStreamAsyncIterator;

const ReadableStreamDefaultReaderType = _flowRuntime.default.type("ReadableStreamDefaultReaderType", ReadableStreamDefaultReaderType => {
  const R = ReadableStreamDefaultReaderType.typeParameter("R");
  return _flowRuntime.default.ref(_flowRuntime.default.tdz(() => ReadableStreamDefaultReader, "ReadableStreamDefaultReader"), R);
});

exports.ReadableStreamDefaultReaderType = ReadableStreamDefaultReaderType;

const ReadableStreamDefaultReader = _flowRuntime.default.type("ReadableStreamDefaultReader", ReadableStreamDefaultReader => {
  const R = ReadableStreamDefaultReader.typeParameter("R");
  return _flowRuntime.default.object(_flowRuntime.default.property("constructor", _flowRuntime.default.function(_flowRuntime.default.param("stream", _flowRuntime.default.ref(ReadableStream, R)), _flowRuntime.default.return(_flowRuntime.default.any()))), _flowRuntime.default.property("closed", _flowRuntime.default.ref("Promise", _flowRuntime.default.void())), _flowRuntime.default.property("cancel", _flowRuntime.default.function(_flowRuntime.default.param("reason", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.void())))), _flowRuntime.default.property("read", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.ref(ReadResult, R))))), _flowRuntime.default.property("releaseLock", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.void()))));
});

exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;

const ReadableStreamBYOBReaderType = _flowRuntime.default.type("ReadableStreamBYOBReaderType", _flowRuntime.default.tdz(() => ReadableStreamBYOBReader, "ReadableStreamBYOBReader"));

exports.ReadableStreamBYOBReaderType = ReadableStreamBYOBReaderType;

const ReadableStreamBYOBReader = _flowRuntime.default.type("ReadableStreamBYOBReader", _flowRuntime.default.object(_flowRuntime.default.property("constructor", _flowRuntime.default.function(_flowRuntime.default.param("stream", ReadableByteStream), _flowRuntime.default.return(_flowRuntime.default.any()))), _flowRuntime.default.property("closed", _flowRuntime.default.ref("Promise", _flowRuntime.default.void())), _flowRuntime.default.property("cancel", _flowRuntime.default.function(_flowRuntime.default.param("reason", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.void())))), _flowRuntime.default.property("read", _flowRuntime.default.function(_fn2 => {
  const T = _fn2.typeParameter("T", _flowRuntime.default.any());

  return [_flowRuntime.default.param("view", T), _flowRuntime.default.return(_flowRuntime.default.ref("Promise", _flowRuntime.default.ref(ReadResult, T)))];
})), _flowRuntime.default.property("releaseLock", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.void())))));

exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;

const ReadableStreamDefaultControllerType = _flowRuntime.default.type("ReadableStreamDefaultControllerType", ReadableStreamDefaultControllerType => {
  const R = ReadableStreamDefaultControllerType.typeParameter("R");
  return _flowRuntime.default.ref(_flowRuntime.default.tdz(() => ReadableStreamDefaultController, "ReadableStreamDefaultController"), R);
});

exports.ReadableStreamDefaultControllerType = ReadableStreamDefaultControllerType;

const ReadableStreamDefaultController = _flowRuntime.default.type("ReadableStreamDefaultController", ReadableStreamDefaultController => {
  const R = ReadableStreamDefaultController.typeParameter("R");
  return _flowRuntime.default.object(_flowRuntime.default.property("desiredSize", _flowRuntime.default.union(_flowRuntime.default.number(), _flowRuntime.default.null())), _flowRuntime.default.property("close", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.void()))), _flowRuntime.default.property("enqueue", _flowRuntime.default.function(_flowRuntime.default.param("chunk", R), _flowRuntime.default.return(_flowRuntime.default.void()))), _flowRuntime.default.property("error", _flowRuntime.default.function(_flowRuntime.default.param("e", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.void()))));
});

exports.ReadableStreamDefaultController = ReadableStreamDefaultController;

const ReadableStreamBYOBRequestType = _flowRuntime.default.type("ReadableStreamBYOBRequestType", _flowRuntime.default.tdz(() => ReadableStreamBYOBRequest, "ReadableStreamBYOBRequest"));

exports.ReadableStreamBYOBRequestType = ReadableStreamBYOBRequestType;

const ReadableStreamBYOBRequest = _flowRuntime.default.type("ReadableStreamBYOBRequest", _flowRuntime.default.object(_flowRuntime.default.property("view", _flowRuntime.default.any()), _flowRuntime.default.property("respond", _flowRuntime.default.function(_flowRuntime.default.param("bytesWritten", _flowRuntime.default.number()), _flowRuntime.default.return(_flowRuntime.default.void()))), _flowRuntime.default.property("respondWithNewView", _flowRuntime.default.function(_flowRuntime.default.param("view", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.void())))));

exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;

const ReadableByteStreamControllerType = _flowRuntime.default.type("ReadableByteStreamControllerType", _flowRuntime.default.tdz(() => ReadableByteStreamController, "ReadableByteStreamController"));

exports.ReadableByteStreamControllerType = ReadableByteStreamControllerType;

const ReadableByteStreamController = _flowRuntime.default.type("ReadableByteStreamController", _flowRuntime.default.object(_flowRuntime.default.property("byobRequest", _flowRuntime.default.union(ReadableStreamBYOBRequest, _flowRuntime.default.void())), _flowRuntime.default.property("desiredSize", _flowRuntime.default.union(_flowRuntime.default.number(), _flowRuntime.default.null())), _flowRuntime.default.property("close", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.void()))), _flowRuntime.default.property("enqueue", _flowRuntime.default.function(_flowRuntime.default.param("chunk", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.void()))), _flowRuntime.default.property("error", _flowRuntime.default.function(_flowRuntime.default.param("e", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.void())))));

exports.ReadableByteStreamController = ReadableByteStreamController;

const TransformStreamDefaultControllerCallback = _flowRuntime.default.type("TransformStreamDefaultControllerCallback", TransformStreamDefaultControllerCallback => {
  const O = TransformStreamDefaultControllerCallback.typeParameter("O");
  return _flowRuntime.default.function(_flowRuntime.default.param("controller", _flowRuntime.default.ref(_flowRuntime.default.tdz(() => TransformStreamDefaultController, "TransformStreamDefaultController"), O)), _flowRuntime.default.return(_flowRuntime.default.union(_flowRuntime.default.void(), _flowRuntime.default.ref("Promise", _flowRuntime.default.void()))));
});

exports.TransformStreamDefaultControllerCallback = TransformStreamDefaultControllerCallback;

const TransformStreamDefaultControllerTransformCallback = _flowRuntime.default.type("TransformStreamDefaultControllerTransformCallback", TransformStreamDefaultControllerTransformCallback => {
  const I = TransformStreamDefaultControllerTransformCallback.typeParameter("I"),
        O = TransformStreamDefaultControllerTransformCallback.typeParameter("O");
  return _flowRuntime.default.function(_flowRuntime.default.param("chunk", I), _flowRuntime.default.param("controller", _flowRuntime.default.ref(_flowRuntime.default.tdz(() => TransformStreamDefaultController, "TransformStreamDefaultController"), O)), _flowRuntime.default.return(_flowRuntime.default.union(_flowRuntime.default.void(), _flowRuntime.default.ref("Promise", _flowRuntime.default.void()))));
});

exports.TransformStreamDefaultControllerTransformCallback = TransformStreamDefaultControllerTransformCallback;

const Transformer = _flowRuntime.default.type("Transformer", Transformer => {
  const I = Transformer.typeParameter("I", undefined, _flowRuntime.default.any()),
        O = Transformer.typeParameter("O", undefined, _flowRuntime.default.any());
  return _flowRuntime.default.object(_flowRuntime.default.property("start", _flowRuntime.default.ref(TransformStreamDefaultControllerCallback, O), true), _flowRuntime.default.property("transform", _flowRuntime.default.ref(TransformStreamDefaultControllerTransformCallback, I, O), true), _flowRuntime.default.property("flush", _flowRuntime.default.ref(TransformStreamDefaultControllerCallback, O), true), _flowRuntime.default.property("readableType", _flowRuntime.default.void(), true), _flowRuntime.default.property("writableType", _flowRuntime.default.void(), true));
});

exports.Transformer = Transformer;

const TransformStream = _flowRuntime.default.type("TransformStream", TransformStream => {
  const I = TransformStream.typeParameter("I", undefined, _flowRuntime.default.any()),
        O = TransformStream.typeParameter("O", undefined, _flowRuntime.default.any());
  return _flowRuntime.default.object(_flowRuntime.default.property("constructor", _flowRuntime.default.function(_flowRuntime.default.param("transformer", _flowRuntime.default.ref(Transformer, I, O), true), _flowRuntime.default.param("writableStrategy", _flowRuntime.default.ref(QueuingStrategy, I), true), _flowRuntime.default.param("readableStrategy", _flowRuntime.default.ref(QueuingStrategy, O), true), _flowRuntime.default.return(_flowRuntime.default.any()))), _flowRuntime.default.property("readable", _flowRuntime.default.ref(ReadableStream, O)), _flowRuntime.default.property("writable", _flowRuntime.default.ref(WritableStream, I)));
});

exports.TransformStream = TransformStream;

const TransformStreamDefaultControllerType = _flowRuntime.default.type("TransformStreamDefaultControllerType", TransformStreamDefaultControllerType => {
  const O = TransformStreamDefaultControllerType.typeParameter("O");
  return _flowRuntime.default.ref(_flowRuntime.default.tdz(() => TransformStreamDefaultController, "TransformStreamDefaultController"), O);
});

exports.TransformStreamDefaultControllerType = TransformStreamDefaultControllerType;

const TransformStreamDefaultController = _flowRuntime.default.type("TransformStreamDefaultController", TransformStreamDefaultController => {
  const O = TransformStreamDefaultController.typeParameter("O");
  return _flowRuntime.default.object(_flowRuntime.default.property("desiredSize", _flowRuntime.default.union(_flowRuntime.default.number(), _flowRuntime.default.null())), _flowRuntime.default.property("enqueue", _flowRuntime.default.function(_flowRuntime.default.param("chunk", O), _flowRuntime.default.return(_flowRuntime.default.void()))), _flowRuntime.default.property("error", _flowRuntime.default.function(_flowRuntime.default.param("reason", _flowRuntime.default.any()), _flowRuntime.default.return(_flowRuntime.default.void()))), _flowRuntime.default.property("terminate", _flowRuntime.default.function(_flowRuntime.default.return(_flowRuntime.default.void()))));
});

exports.TransformStreamDefaultController = TransformStreamDefaultController;